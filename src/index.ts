import { AppDataSource } from "./data-source";
import Bot, { CallbackQuery, InputMedia, Message } from "node-telegram-bot-api";
import { User } from "./entity/User";
import { text } from "./text";
import { test } from "./test";
import fs from "fs";
import path from "path";
import { wait } from "./wait";

const bot = new Bot(
  /*process.env.TG_TOKEN*/ "7035011978:AAF8vnDTL-TN9u0fxTU2h7vK1xsnRPhg_ys",
  {
    polling: true,
  },
);

AppDataSource.initialize().then(async () => {
  const userRepo = await AppDataSource.getRepository(User);
  bot.onText(/\/start/, async (msg) => {
    let user = await userRepo.findOneBy({id: String(msg.from.id)});
    if (!user) {
      user = new User();
      user.username = msg.from.username;
      user.id = String(msg.from.id);
      await userRepo.save(user);
    }
    await wait(0.5);
    bot.sendMessage(msg.from.id, text("start.txt"), {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–ê–¥—Ä–µ—Å",
              callback_data: "address",
            },
          ],
          [
            {
              text: "–°–æ—Ü—Å–µ—Ç–∏",
              callback_data: "networks",
            },
          ],
          [
            {
              text: "–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
              callback_data: "support",
            },
          ],
          [
            {
              text: "–û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫",
              callback_data: "callback",
            },
          ],
          [
            {
              text: "–¢–µ—Å—Ç",
              callback_data: "test",
            },
          ],
          [
            {
              callback_data: "about",
              text: "–û —Å—Ç—É–¥–∏–∏",
            },
          ],
          [
            {
              callback_data: "masters",
              text: "–ú–∞—Å—Ç–µ—Ä–∞",
            },
          ],
          [
            {
              text: "–û—Ç–∑—ã–≤—ã",
              callback_data: "reviews",
            },
          ],
          [
            {
              text: "–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º",
              callback_data: "choose-time",
            },
          ],
        ],
      },
    });
  });

  bot.on("callback_query", async (q) => {
    const user = await userRepo.findOneBy({ id: String(q.from.id) });
    console.log(q.data);
    console.log(user.lastQuery);
    if (q.data === "about") {
      await wait(0.5);
      await bot.sendMessage(q.from.id, q.from.first_name + text("about.txt"), {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–î–∞, —Ö–æ—Ç–µ–ª –±—ã",
                callback_data: "program-y",
              },
            ],
            [
              {
                text: "–ù–µ—Ç, –Ω–µ —Ö–æ—á—É",
                callback_data: "program-n",
              },
            ],
            [
              {
                text: "–£–∂–µ –ø–æ–ª—É—á–∏–ª(–∞)",
                callback_data: "program-a",
              },
            ],
          ],
        },
      });
    } else if (
      q.data === "test" ||
      q.data === "program-y" ||
      q.data === "program-n"
    ) {
      if (user.complete) {
        await wait(0.5);
        await bot.sendMessage(q.from.id, "–ò—Ç–∞–∫, –Ω–∞—á–Ω–µ–º!", {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç",
                  callback_data: "do",
                },
              ],
              [
                {
                  text: "–ù–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å",
                  callback_data: "dont",
                },
              ],
            ],
          },
        });
        return;
      }
      const img: Buffer = fs.readFileSync(
        path.join(__dirname, "img", "massage.png"),
      );
      await wait(0.5);
      await bot.sendPhoto(q.from.id, img, {
        caption: text("test.txt"),
      });
      await wait(1);
      await bot.sendMessage(q.from.id, text("test-2.txt"), {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–°—É–ø–µ—Ä!",
                callback_data: "super",
              },
            ],
          ],
        },
      });
    } else if (q.data === "program-a") {
      await wait(0.5);
      await bot.sendMessage(q.from.id, "–û—Ç–ª–∏—á–Ω–æ!");
    } else if (q.data === "address") {
      await wait(0.5);
      await bot.sendMessage(
        q.from.id,
        "üìç–ù–∞—à –∞–¥—Ä–µ—Å: [–ú–µ–±–µ–ª—å–Ω–∞—è –¥47 –∫1](https://yandex.ru/navi/-/CCUNjBd2TA)",
        {
          parse_mode: "MarkdownV2",
        },
      );
    } else if (q.data === "networks") {
      await wait(0.5);
      await bot.sendMessage(q.from.id, text("networks.md"), {
        parse_mode: "MarkdownV2",
      });
    } else if (q.data === "support") {
      await wait(0.5);
      await bot.sendMessage(q.from.id, "‚úèÔ∏è —Ç–µ–ª.—Å—Ç—É–¥–∏–∏ +7(921)907-54-09");
    } else if (q.data === "callback") {
      await wait(0.5);
      await bot.sendMessage(q.from.id, text("callback.txt"));
      user.waitingFor = "phone";
      await userRepo.save(user);
    } else if (q.data === "reviews") {
      const links = [
        "https://ibb.co/M2XML38",
        "https://ibb.co/Snj421S",
        "https://ibb.co/8rDjRgm",
        "https://ibb.co/Qm3g8FB",
        "https://ibb.co/zVpwsXq",
        "https://ibb.co/WGYL7th",
        "https://ibb.co/DDSgDFv",
      ];
      let media: InputMedia[] = [];
      links.forEach((l) => {
        media.push({
          media: l,
          type: "photo",
        });
      });
      await bot.sendMediaGroup(q.from.id, media);
    } else if (q.data === "choose-time") {
      await wait(0.5);
      await bot.sendMessage(q.from.id, text("address.txt"));
      user.waitingFor = "address";
      await userRepo.save(user);
    }

    test(bot, userRepo,q);



  });



  bot.onText(/./, async (msg) => {
    const user = await userRepo.findOneBy({ id: String(msg.from.id) });
    if (user && user.waitingFor === "phone") {
      user.waitingFor = "none";
      await userRepo.save(user);
      await bot.sendMessage(
        msg.from.id,
        "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É, —Ç–µ–ª–µ—Ñ–æ–Ω: " + msg.text,
      );
    } else if (user && user.waitingFor === "age" && /^[0-9]+$/.test(msg.text)) {
      user.waitingFor = "none";
      user.age = +msg.text;
      await userRepo.save(user);
      await wait(0.5);
      await bot.sendMessage(msg.from.id, "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª", {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–ú—É–∂",
                callback_data: "male",
              },
              {
                text: "–ñ–µ–Ω",
                callback_data: "female",
              },
            ],
          ],
        },
      });
    } else if (user && user.waitingFor === "address") {
      user.waitingFor = "none";
      await userRepo.save(user);
      await wait(0.5);
      await bot.sendMessage(
        msg.from.id,
        "–ó–∞–ø–∏—Å–∞–ª. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç –ø–æ –≤–∏–∑–∏—Ç—É ü©∑",
      );
      await bot.sendMessage(msg.from.id, `–°–û–û–ë–©–ï–ù–ò–ï –ê–î–ú–ò–ù–£: ${msg.text}`);
    } else if (user && user.waitingFor === "tellMore") {
      user.waitingFor = "none";
      user.tellMore += `${user.tellMoreQuery}: ${msg.text}\n`;
      await userRepo.save(user);
      if (user.tellMoreQuery === "–¢—Ä–∞–≤–º—ã") {
        await bot.sendMessage(
          msg.from.id,
          "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è –∫ –º–∞—Å—Å–∞–∂—É?",
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–î–∞",
                    callback_data: "against-y",
                  },
                  {
                    text: "–ù–µ—Ç",
                    callback_data: "against-n",
                  },
                  {
                    text: "–ù–∞–∑–∞–¥",
                    callback_data: user.lastQuery,
                  },
                ],
              ],
            },
          },
        );
      } else if (user.tellMoreQuery === "–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è") {
        await bot.sendMessage(
          msg.from.id,
          "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è?",
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–î–∞",
                    callback_data: "chron-y",
                  },
                  {
                    text: "–ù–µ—Ç",
                    callback_data: "chron-n",
                  },
                  {
                    text: "–ù–∞–∑–∞–¥",
                    callback_data: user.lastQuery,
                  },
                ],
              ],
            },
          },
        );
      } else if (user.tellMoreQuery === "–û–ø—ã—Ç") {
        await bot.sendMessage(
          msg.from.id,
          "–ö–∞–∫–æ–π —Ü–µ–ª–∏ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –¥–æ—Å—Ç–∏—á—å —á–µ—Ä–µ–∑ –º–∞—Å—Å–∞–∂?",
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–£–ª—É—á—à–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ",
                    callback_data: "recover",
                  },
                ],
                [
                  {
                    text: "–£—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π",
                    callback_data: "skincare",
                  },
                ],
                [
                  {
                    text: "–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –∏ —Å–Ω—è—Ç–∏–µ —Å—Ç—Ä–µ—Å—Å–∞",
                    callback_data: "relief",
                  },
                ],
                [
                  {
                    text: "–ù–∞–∑–∞–¥",
                    callback_data: user.lastQuery,
                  },
                ],
              ],
            },
          },
        );
      } else if (user.tellMoreQuery === "–¶–µ–ª—å") {
        await bot.sendMessage(
          msg.from.id,
          "–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —è –±—ã –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∞–∂",
        );
        await bot.sendMessage(
          msg.from.id,
          "–ù—É —á—Ç–æ, –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–π—Ç–∏ –∫ –Ω–∞–º –Ω–∞ –≤–∏–∑–∏—Ç?",
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–î–∞, –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –≤—Ä–µ–º—è",
                    callback_data: "choose-time",
                  },
                ],
                [
                  {
                    text: "–ù–µ—Ç, –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤",
                    callback_data: "not-ready-yet",
                  },
                ],
              ],
            },
          },
        );
      } else if (user.tellMoreQuery === "–ö–æ–∂–∞") {
        user.skinIssue = "other";
        await userRepo.save(user);
        await bot.sendMessage(
          msg.from.id,
          "–ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏ –æ—Ç 1-5?",
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "1",
                    callback_data: "skin-1",
                  },
                  {
                    text: "2",
                    callback_data: "skin-2",
                  },
                ],
                [
                  {
                    text: "3",
                    callback_data: "skin-3",
                  },
                  {
                    text: "4",
                    callback_data: "skin-4",
                  },
                  {
                    text: "5",
                    callback_data: "skin-5",
                  },
                ],
                [
                  {
                    text: "–ù–∞–∑–∞–¥",
                    callback_data: user.lastQuery,
                  },
                ],
              ],
            },
          },
        );
      }
      
    }
  });

  
});
